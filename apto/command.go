/*
apto is a package automatically generated by ´gobi´. Happy hacking!
*/
package apto

import (
	"bytes"
	"errors"
	"strings"
)

// MyaptoExample is a example type automatically generated by ´gobi´.
type Command struct {
	Sudo    bool
	Tool    string
	Cmd     string
	Pkgs    []string
	Options []string
}

// NewCommand creates new, empty *Command
func NewCommand() *Command {
	return new(Command)
}

// Create *Command given arguments
func (command *Command) Create(sudo bool, tool string, cmd string, pkgs []string, options []string) error {
	if tool == "" {
		return errors.New("Tool is empty.")
	} else if cmd == "" {
		return errors.New("Cmd is empty.")
	}

	command.Sudo = sudo
	command.Tool = tool
	command.Cmd = cmd
	command.Pkgs = pkgs
	command.Options = options

	return nil
}

// Install creates a apt-get install command given packages and options
func (command *Command) Install(pkgs []string, options []string) error {
	if len(pkgs) == 0 {
		return errors.New("No given pkgs to Install.")
	}

	command.Create(true,
		"apt-get",
		"install",
		pkgs,
		options)

	return nil
}

// String ressembles Command into a valid bash command
func (command *Command) String() string {
	var buf bytes.Buffer
	if command.Sudo == true {
		buf.WriteString("sudo ")
	}

	buf.WriteString(command.Tool)
	buf.WriteString(" ")
	buf.WriteString(command.Cmd)
	buf.WriteString(" ")

	for i := range command.Pkgs {
		buf.WriteString(command.Pkgs[i])
		buf.WriteString(" ")
	}

	for i := range command.Options {
		buf.WriteString(command.Options[i])
		buf.WriteString(" ")
	}

	return strings.TrimSpace(buf.String())
}
